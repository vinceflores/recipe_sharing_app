// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./app.db"
}

model User {
  id      String @id @default(uuid())
  clerkId String @unique
  email   String

  recipe   Recipe[]
  likes    Likes[]
  settings Settings?
  comments Comment[]
}

model Settings {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Recipe {
  id String @id @default(uuid())

  title        String @default("")
  ingredients  String @default("")
  instructions String @default("")

  user   User   @relation(fields: [userId], references: [id])
  userId String @default("")

  likes      Likes[]
  images     Image[]
  video_url  Video[]
  categories Category[]
  comments   CommentsOnRecipes[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model Category {
  id      String   @id @default(uuid())
  name    String
  icon    String  @default("üç¥")
  recipes Recipe[]
}

model Likes {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  @@id([userId, recipeId])
}

model Image {
  id       String             @id @default(uuid())
  url      String
  name     String
  format   String
  Recipe   Recipe?            @relation(fields: [recipeId], references: [id])
  recipeId String?
  comments ImagesOnComments[]
}

model Video {
  id       String             @id @default(uuid())
  url      String
  name     String
  Recipe   Recipe?            @relation(fields: [recipeId], references: [id])
  recipeId String?
  comments VideosOnComments[]
}

model Comment {
  id       String              @id @default(uuid())
  title    String
  comment  String
  recipeId String?
  users    User[]
  images   ImagesOnComments[]
  videos   VideosOnComments[]
  recipes  CommentsOnRecipes[]
}

model ImagesOnComments {
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  assignedAt DateTime @default(now())

  @@id([commentId, imageId])
}

model VideosOnComments {
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  assignedAt DateTime @default(now())

  @@id([commentId, videoId])
}

model CommentsOnRecipes {
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  @@id([commentId, recipeId])
}
